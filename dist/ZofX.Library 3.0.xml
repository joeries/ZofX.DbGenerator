<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ZofX.Library 3.0</name>
    </assembly>
    <members>
        <member name="T:ZofX.Library.Reflection.TypeCache">
            <summary>
            反射缓存
            </summary>
        </member>
        <member name="M:ZofX.Library.Reflection.TypeCache.GetCachedType(System.Object)">
            <summary>
            类型缓存
            </summary>
            <param name="key">实例</param>
            <returns></returns>
        </member>
        <member name="M:ZofX.Library.Reflection.TypeCache.GetCachedType(System.String)">
            <summary>
            类型缓存
            </summary>
            <param name="key">类型限定名</param>
            <returns></returns>
        </member>
        <member name="M:ZofX.Library.Reflection.TypeCache.AddType(System.Type)">
            <summary>
            添加类型到缓存
            </summary>
            <param name="type">类型反射</param>
        </member>
        <member name="T:ZofX.Library.Strings.FilterHelper">
            <summary>
            字符串过滤类
            </summary>
        </member>
        <member name="M:ZofX.Library.Strings.FilterHelper.GetValue(System.Object)">
            <summary>
            获取Request等值，如果为NULL返回空字符串
            </summary>
            <param name="obj">Request等对象</param>
            <returns>对象的值</returns>
        </member>
        <member name="M:ZofX.Library.Strings.FilterHelper.GetValueByKeyFromRequest(System.Web.HttpRequest,System.String)">
            <summary>
            从HTTP请求中获取键值
            </summary>
            <param name="request">HTTP请求</param>
            <param name="key">键</param>
            <returns>值</returns>
        </member>
        <member name="M:ZofX.Library.Strings.FilterHelper.ScriptFilter(System.String)">
            <summary>
            过滤脚本
            </summary>
            <param name="Htmlstring">待过滤字符串</param>
            <returns>过滤后字符串</returns>
        </member>
        <member name="M:ZofX.Library.Strings.FilterHelper.HtmlFilter(System.String)">
            <summary>
            去除HTML标记
            </summary>
            <param name="Htmlstring">HTML文本</param>
            <returns>无格式纯文本</returns>
        </member>
        <member name="M:ZofX.Library.Strings.FilterHelper.SingleQuoteFilter(System.String,System.Boolean)">
            <summary>
            单引号过滤
            </summary>
            <param name="str">待过滤内容</param>
            <param name="isCut">是否去掉，若为否，则替换成&#39;</param>
            <returns>经过滤内容</returns>
        </member>
        <member name="M:ZofX.Library.Strings.FilterHelper.XmlValueFilter(System.String,System.Boolean)">
            <summary>
            XML数据过滤
            </summary>
            <param name="Strs">待过滤字符串</param>
            <param name="isCut">是否替换为空</param>
            <returns>过滤后字符串</returns>
        </member>
        <member name="M:ZofX.Library.Strings.FilterHelper.SubString(System.String,System.Int32,System.String)">
            <summary>
            截取字符串前length个字符，少于length个不处理
            </summary>
            <param name="Str">字符串</param>
            <param name="length">截取长度</param>
            <param name="sufix">后缀</param>
            <returns>截取后字符</returns>
        </member>
        <member name="T:ZofX.Library.Strings.HtmlBuilder">
            <summary>
            HTML组建方法库
            </summary>
        </member>
        <member name="M:ZofX.Library.Strings.HtmlBuilder.Alert(System.String,System.String,System.String,System.String)">
            <summary>
            弹出对话框，并跳转
            </summary>
            <param name="strMessage">消息内容</param>
            <param name="strTarget">跳转目标窗口</param>
            <param name="strLocation">跳转地址</param>
            <param name="strOP">其他js操作代码</param>
            <returns>JS脚本</returns>
        </member>
        <member name="M:ZofX.Library.Strings.HtmlBuilder.Confirm(System.String,System.String)">
            <summary>
            弹出confirm对话框
            </summary>
            <param name="strMessage">消息内容</param>
            <param name="strLocation">跳转地址</param>
            <returns></returns>
        </member>
        <member name="T:ZofX.Library.Encryption.DesEncryptor2">
            <summary>
            DES加密/解密类。
            </summary>
        </member>
        <member name="M:ZofX.Library.Encryption.DesEncryptor2.#ctor">
            <summary>
            加密构造
            </summary>
        </member>
        <member name="M:ZofX.Library.Encryption.DesEncryptor2.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="Text">源字符串</param>
            <returns>加密字符串</returns>
        </member>
        <member name="M:ZofX.Library.Encryption.DesEncryptor2.Encrypt(System.String,System.String)">
            <summary> 
            加密数据 
            </summary> 
            <param name="Text">源字符串</param> 
            <param name="sKey">私有密钥</param> 
            <returns>加密字符串</returns> 
        </member>
        <member name="M:ZofX.Library.Encryption.DesEncryptor2.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="Text">加密字符串</param>
            <returns>解密字符串</returns>
        </member>
        <member name="M:ZofX.Library.Encryption.DesEncryptor2.Decrypt(System.String,System.String)">
            <summary> 
            解密数据 
            </summary> 
            <param name="Text">加密字符串</param> 
            <param name="sKey">私有密钥</param> 
            <returns>解密字符串</returns> 
        </member>
        <member name="T:ZofX.Library.Network.MailHelper">
            <summary>
            邮件辅助类
            </summary>
        </member>
        <member name="M:ZofX.Library.Network.MailHelper.#ctor">
            <summary>
            无参构造
            </summary>
        </member>
        <member name="M:ZofX.Library.Network.MailHelper.Send">
            <summary>
            发送邮件
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZofX.Library.Network.MailHelper.SetAccount(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            设置主机、端口、用户名和密码
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="enableSsl"></param>
            <param name="userName"></param>
            <param name="userPwd"></param>
        </member>
        <member name="M:ZofX.Library.Network.MailHelper.AddTo(System.String,System.String)">
            <summary>
            添加收件人
            </summary>
            <param name="email">邮箱地址</param>
            <param name="name">显示名称</param>
        </member>
        <member name="M:ZofX.Library.Network.MailHelper.AddCc(System.String,System.String)">
            <summary>
            添加抄送
            </summary>
            <param name="email">邮箱地址</param>
            <param name="name">显示名称</param>
        </member>
        <member name="M:ZofX.Library.Network.MailHelper.AddBcc(System.String,System.String)">
            <summary>
            添加暗送
            </summary>
            <param name="email">邮箱地址</param>
            <param name="name">显示名称</param>
        </member>
        <member name="M:ZofX.Library.Network.MailHelper.SetSender(System.String,System.String)">
            <summary>
            设置发件人
            </summary>
            <param name="email"></param>
            <param name="name"></param>
        </member>
        <member name="M:ZofX.Library.Network.MailHelper.SetFrom(System.String,System.String)">
            <summary>
            设置邮件来源
            </summary>
            <param name="email"></param>
            <param name="name"></param>
        </member>
        <member name="M:ZofX.Library.Network.MailHelper.SetSubject(System.String,System.Text.Encoding)">
            <summary>
            设置主题
            </summary>
            <param name="subject"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:ZofX.Library.Network.MailHelper.SetBody(System.String,System.Text.Encoding,System.Nullable{System.Boolean})">
            <summary>
            设置内容
            </summary>
            <param name="body"></param>
            <param name="encoding"></param>
            <param name="isBodyHtml"></param>
        </member>
        <member name="T:ZofX.Library.File.AppConfigHelper">
            <summary>
            读取与设置.NET应用程序的config配置文件
            </summary>
        </member>
        <member name="F:ZofX.Library.File.AppConfigHelper.xDoc">
            <summary>
            Xml文档对象
            </summary>
        </member>
        <member name="F:ZofX.Library.File.AppConfigHelper.xNode">
            <summary>
            Xml节点对象
            </summary>
        </member>
        <member name="F:ZofX.Library.File.AppConfigHelper.xElem">
            <summary>
            Xml元素对象
            </summary>
        </member>
        <member name="F:ZofX.Library.File.AppConfigHelper.AppConfigPath">
            <summary>
            config文件路径
            </summary>
        </member>
        <member name="M:ZofX.Library.File.AppConfigHelper.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ZofX.Library.File.AppConfigHelper.SetAppSettings(System.String,System.String)">
            <summary>
            设置appSettings键
            </summary>
            <param name="key">键</param>
            <param name="val">值</param>
        </member>
        <member name="M:ZofX.Library.File.AppConfigHelper.GetAppSettings(System.String)">
            <summary>
            读取appSettings键
            </summary>
            <param name="key">键</param>
            <returns>值</returns>
        </member>
        <member name="M:ZofX.Library.File.AppConfigHelper.SetConnectionStrings(System.String,System.String)">
            <summary>
            设置connectionStrings键
            </summary>
            <param name="name">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:ZofX.Library.File.AppConfigHelper.GetConnectionStrings(System.String)">
            <summary>
            读取connectionStrings键
            </summary>
            <param name="name">键</param>
            <returns>值</returns>
        </member>
        <member name="M:ZofX.Library.File.AppConfigHelper.SetNodeAttr(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            设置某元素某属性值
            </summary>
            <param name="xpath">xPath路径</param>
            <param name="elementName">元素名</param>
            <param name="getAttrName">获取指定元素的属性名称</param>
            <param name="getAttrValue">获取指定元素的属性值</param>
            <param name="setAttrName">设置指定元素的属性名称</param>
            <param name="setAttrValue">设置指定元素的属性值</param>
        </member>
        <member name="M:ZofX.Library.File.AppConfigHelper.GetNodeAttr(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            获取某元素某属性值
            </summary>
            <param name="xpath">xPath路径</param>
            <param name="elementName">元素名</param>
            <param name="getAttrName">获取指定元素的属性名称</param>
            <param name="getAttrValue">获取指定元素的属性值</param>
            <param name="returnAttrName">返回指定元素的属性名称</param>
        </member>
        <member name="M:ZofX.Library.File.AppConfigHelper.SetNodeValue(System.String,System.String)">
            <summary>
            设置节点值
            </summary>
            <param name="xpath">XPath路径</param>
            <param name="val">值</param>
        </member>
        <member name="M:ZofX.Library.File.AppConfigHelper.GetNodeValue(System.String)">
            <summary>
            读取节点值
            </summary>
            <param name="xpath">XPath路径</param>
            <returns>值</returns>
        </member>
        <member name="M:ZofX.Library.File.AppConfigHelper.GetChildNodes(System.String)">
            <summary>
            获取子节点
            </summary>
            <param name="xpath">xPath路径</param>
            <returns>子节点列表</returns>
        </member>
        <member name="T:ZofX.Library.Encryption.DesEncryptor1">
            <summary>
            DES加解密
            </summary>
        </member>
        <member name="M:ZofX.Library.Encryption.DesEncryptor1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ZofX.Library.Encryption.DesEncryptor1.EncryptString(System.String)">
            
            <summary>
            加密字符串并返回加密后的结果
            </summary>
            <param name="str">源字符串</param>
            <returns>加密字符串</returns>
        </member>
        <member name="M:ZofX.Library.Encryption.DesEncryptor1.DecryptString(System.String)">
            
            <summary>
            解密给定的字符串
            </summary>
            <param name="str">要解密的字符</param>
            <returns></returns>
        </member>
        <member name="P:ZofX.Library.Encryption.DesEncryptor1.EncryptKey">
            
            <summary>
            设置加密密钥
            </summary>
        </member>
        <member name="P:ZofX.Library.Encryption.DesEncryptor1.EncodingMode">
            
            <summary>
            要加密字符的编码模式
            </summary>
        </member>
        <member name="T:ZofX.Library.Strings.IDCheckHelper">
             <summary>
            IDCheckHelper 的摘要说明
             </summary>
        </member>
        <member name="M:ZofX.Library.Strings.IDCheckHelper.IsValidIdCard18(System.String)">
            <summary>
            验证18位身份证格式
            </summary>
            <param name="cid"></param>
            <returns>返回字符串,出错信息</returns>
        </member>
        <member name="M:ZofX.Library.Strings.IDCheckHelper.IsValidIdCard15(System.String)">
            <summary>
            验证15位身份证格式
            </summary>
            <param name="cid"></param>
            <returns></returns>
        </member>
        <member name="T:ZofX.Library.File.UploadEventArgs">
            <summary>
            上传参数
            </summary>
        </member>
        <member name="F:ZofX.Library.File.UploadEventArgs._strFileExt">
            <summary>
            文件后缀名
            </summary>
        </member>
        <member name="F:ZofX.Library.File.UploadEventArgs._strFileStateName">
            <summary>
            文件主名称
            </summary>
        </member>
        <member name="F:ZofX.Library.File.UploadEventArgs._strErrorMessage">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="F:ZofX.Library.File.UploadEventArgs._boolIsSuccess">
            <summary>
            文件上传是否成功
            </summary>
        </member>
        <member name="F:ZofX.Library.File.UploadEventArgs._strServerRelativePath">
            <summary>
            文件上传成功后的服务器端相对路径
            </summary>
        </member>
        <member name="P:ZofX.Library.File.UploadEventArgs.FileExt">
            <summary>
            文件后缀名，如.swf
            </summary>
        </member>
        <member name="P:ZofX.Library.File.UploadEventArgs.FileStateName">
            <summary>
            文件主名称
            </summary>
        </member>
        <member name="P:ZofX.Library.File.UploadEventArgs.ErrorMessage">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:ZofX.Library.File.UploadEventArgs.IsSuccess">
            <summary>
            文件上传是否成功
            </summary>
        </member>
        <member name="P:ZofX.Library.File.UploadEventArgs.ServerRelativePath">
            <summary>
            文件上传成功后的服务器端相对路径
            </summary>
        </member>
        <member name="T:ZofX.Library.File.UploadHelper">
            <summary>
            文件上传类
            </summary>
        </member>
        <member name="F:ZofX.Library.File.UploadHelper._strAllowExtList">
            <summary>
            允许上传的文件类型列表，即扩展名列表，如：.bmp|.gif|.jpg|.jpeg|.png|.psd
            </summary>
        </member>
        <member name="F:ZofX.Library.File.UploadHelper._intAllowMaxLen">
            <summary>
            允许上传的最大大小，以B为单位，如：1000（需在Web.config里设置）
            </summary>
        </member>
        <member name="F:ZofX.Library.File.UploadHelper._strUploadPath">
            <summary>
            服务器端上传相对路径，如：/Upload/
            </summary>
        </member>
        <member name="M:ZofX.Library.File.UploadHelper.#ctor">
            <summary>
            无参构造函数
            </summary>
        </member>
        <member name="M:ZofX.Library.File.UploadHelper.#ctor(System.String,System.UInt64,System.String)">
            <summary>
            可设置允许上传的文件类型和大小以及上传路径的构造函数
            </summary>
            <param name="strAllowExtList">允许上传的文件类型列表，即扩展名列表，如：.bmp|.gif|.jpg|.jpeg|.png|.psd</param>
            <param name="intAllowMaxLen">允许上传的最大大小，以B为单位，如：1000（需在Web.config里设置）</param>
            <param name="strUploadPath">服务器端上传相对路径，如：/Upload/</param>
        </member>
        <member name="M:ZofX.Library.File.UploadHelper.Upload(System.Web.HttpPostedFile)">
            <summary>
            文件上传方法
            </summary>
            <param name="file">待上载文件</param>
            <returns>是否上传成功</returns>
        </member>
        <member name="E:ZofX.Library.File.UploadHelper.OnUploaded">
            <summary>
            上传事件
            </summary>
        </member>
        <member name="P:ZofX.Library.File.UploadHelper.AllowExtList">
            <summary>
            允许上传的文件类型列表，即扩展名列表，如：.bmp|.gif|.jpg|.jpeg|.png|.psd
            </summary>
        </member>
        <member name="P:ZofX.Library.File.UploadHelper.AllowMaxLen">
            <summary>
            允许上传的最大大小，以B为单位，如：1000（需在Web.config里设置）
            </summary>
        </member>
        <member name="P:ZofX.Library.File.UploadHelper.UploadPath">
            <summary>
            服务器端上传相对路径，如：/Upload/
            </summary>
        </member>
        <member name="T:ZofX.Library.File.UploadHelper.OnUploadedHandler">
            <summary>
            上传委托
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZofX.Library.File.IniHelper">
            <summary>
            ini文件读写类
            </summary>
        </member>
        <member name="F:ZofX.Library.File.IniHelper.strIniPath">
            <summary>
            ini文件路径
            </summary>
        </member>
        <member name="M:ZofX.Library.File.IniHelper.#ctor(System.String)">
            <summary>
            类的构造函数，传递INI文件名
            </summary>
            <param name="iniPath">ini文件绝对路径</param>
        </member>
        <member name="M:ZofX.Library.File.IniHelper.Read(System.String,System.String)">
            <summary>
            读取INI文件指定节和键
            </summary>
            <param name="Section">节名</param>
            <param name="Key">键名</param>
            <returns>键值</returns>
        </member>
        <member name="M:ZofX.Library.File.IniHelper.Write(System.String,System.String,System.String)">
            <summary>
            写INI文件 
            </summary>
            <param name="Section">节名</param>
            <param name="Key">键名</param>
            <param name="Value">键值</param>
        </member>
        <member name="P:ZofX.Library.File.IniHelper.IniPath">
            <summary>
            获取ini文件路径
            </summary>
        </member>
        <member name="T:ZofX.Library.Reflection.Invoker">
            <summary>
            反射调用类
            </summary>
        </member>
        <member name="F:ZofX.Library.Reflection.Invoker.htAssembly">
            <summary>
            程序集缓存
            </summary>
        </member>
        <member name="M:ZofX.Library.Reflection.Invoker.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            调用某对象的公有方法
            </summary>
            <param name="obj">对象</param>
            <param name="methodName">方法名称</param>
            <param name="methodArgs">方法参数</param>
            <returns>方法返回值</returns>
        </member>
        <member name="M:ZofX.Library.Reflection.Invoker.InvokeMethod(System.Type,System.String,System.Object[])">
            <summary>
            调用非静态类类的公有方法
            </summary>
            <param name="type">类型</param>
            <param name="methodName">方法名称</param>
            <param name="methodArgs">方法参数</param>
            <returns>方法返回值</returns>
        </member>
        <member name="M:ZofX.Library.Reflection.Invoker.InvokeMethod(System.String,System.String,System.Object[])">
            <summary>
            调用非静态类类的公有方法
            </summary>
            <param name="typeName">类型名称</param>
            <param name="methodName">方法名称</param>
            <param name="methodArgs">方法参数</param>
            <returns>方法返回值</returns>
        </member>
        <member name="M:ZofX.Library.Reflection.Invoker.InvokeMethod(System.String,System.String,System.String,System.Object[])">
            <summary>
            调用某程序集类的非静态类类的公有方法
            </summary>
            <param name="assemblyFilePath">程序集路径</param>
            <param name="typeName">类型名称</param>
            <param name="methodName">方法名称</param>
            <param name="methodArgs">方法参数</param>
            <returns>方法返回值</returns>
        </member>
        <member name="T:ZofX.Library.Encryption.Encryptor">
            <summary>
            加密类
            </summary>
        </member>
        <member name="M:ZofX.Library.Encryption.Encryptor.Md5_16(System.String)">
            <summary>
            16位MD5加密
            </summary>
            <param name="strPassWord">明文</param>
            <returns>密码</returns>
        </member>
        <member name="M:ZofX.Library.Encryption.Encryptor.Md5_32(System.String)">
            <summary>
            32位MD5加密
            </summary>
            <param name="strPassWord">明文</param>
            <returns>密码</returns>
        </member>
        <member name="M:ZofX.Library.Encryption.Encryptor.Sha1(System.String)">
            <summary>   
            SHA1加密   
            </summary>   
            <param name="strPassWord">源字符串</param>   
            <returns>加密后的字符串</returns>   
        </member>
        <member name="T:ZofX.Library.Strings.CheckHelper">
            <summary>
            字符串检测类
            </summary>
        </member>
        <member name="M:ZofX.Library.Strings.CheckHelper.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:ZofX.Library.Strings.CheckHelper.isValidId(System.String,System.Boolean,ZofX.Library.Strings.CheckHelper.ExistHandler)">
            <summary>
            判断ID是否为数字且存在
            </summary>
            <param name="ID">文章编号等</param>
            <param name="isInt">是否整数</param>
            <param name="exist">存在委托</param>
            <returns></returns>
        </member>
        <member name="M:ZofX.Library.Strings.CheckHelper.IsContainSpecialChars(System.String)">
            <summary>
            检测是否含有特殊字符
            </summary>
            <param name="str">待检测字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZofX.Library.Strings.CheckHelper.IsNumberType(System.String)">
            <summary>
            是否数值型数据类型
            </summary>
            <param name="strTypeName">类型名称</param>
            <returns>结果</returns>
        </member>
        <member name="M:ZofX.Library.Strings.CheckHelper.GetType(System.String)">
            <summary>
            检测数据类型属于哪一类：bool、num、str
            </summary>
            <param name="strTypeName">类型名称</param>
            <returns>结果</returns>
        </member>
        <member name="M:ZofX.Library.Strings.CheckHelper.IsValid(System.String)">
            <summary>
            检测字符串是否只由数字、字母、汉字和下划线等组成
            </summary>
            <param name="str">待检查的字符串</param>
            <returns>结果字符串</returns>
        </member>
        <member name="M:ZofX.Library.Strings.CheckHelper.IsNumberic(System.String)">
            <summary>
            判断一个字符串是否是含数字（正负数、小数等）
            </summary>
            <param name="str">待检查字符串</param>
            <returns>结果</returns>
        </member>
        <member name="M:ZofX.Library.Strings.CheckHelper.IsNumberString(System.String)">
            <summary>
            检测字符串是否只包含数字字符
            </summary>
            <param name="_strNum">待检测字符串</param>
            <returns>结果</returns>
        </member>
        <member name="M:ZofX.Library.Strings.CheckHelper.IsValidDecimal(System.String)">
            <summary>
            验证是否为小数
            </summary>
            <param name="strIn">待验证字符串</param>
            <returns>是否为小数</returns>
        </member>
        <member name="M:ZofX.Library.Strings.CheckHelper.IsValidEmail(System.String)">
            <summary>
            检测字符串是否为邮箱格式
            </summary>
            <param name="strIn">待检测字符串</param>
            <returns>是否符合邮箱格式</returns>
        </member>
        <member name="M:ZofX.Library.Strings.CheckHelper.IsValidTel(System.String)">
            <summary>
            验证是否为电话号码
            </summary>
            <param name="strIn">待检测字符串</param>
            <returns>结果</returns>
        </member>
        <member name="M:ZofX.Library.Strings.CheckHelper.IsValidMobile(System.String)">
            <summary>
            验证是否为是手机号码
            </summary>
            <param name="strIn">待检测字符串</param>
            <returns>结果</returns>
        </member>
        <member name="M:ZofX.Library.Strings.CheckHelper.IsValidDate(System.String)">
            <summary>
            验证年月日是否正确
            </summary>
            <param name="strIn">待验证日期字符串</param>
            <returns>结果</returns>
        </member>
        <member name="M:ZofX.Library.Strings.CheckHelper.IsValidByte(System.String,System.Int32,System.Int32)">
            <summary>
            验证字符长度的范围
            </summary>
            <param name="strIn">待验证字符串</param>
            <param name="min">最小长度</param>
            <param name="max">最大长度</param>
            <returns>结果</returns>
        </member>
        <member name="M:ZofX.Library.Strings.CheckHelper.IsValidIP(System.String)">
            <summary>
            验证IP格式
            </summary>
            <param name="strIn">待验证字符串</param>
            <returns>结果</returns>
        </member>
        <member name="M:ZofX.Library.Strings.CheckHelper.IsLocalSubmit">
            <summary>
            判断是否是本地POST
            </summary>
            <returns>结果</returns>
        </member>
        <member name="T:ZofX.Library.Strings.CheckHelper.ExistHandler">
            <summary>
            委托
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:ZofX.Library.Encryption.MD4">
            
             Implements the MD4 message digest algorithm in C#
            
        </member>
        <member name="F:ZofX.Library.Encryption.MD4.BLOCK_LENGTH">
            
             The size in bytes of the input block to the transformation algorithm
            
        </member>
        <member name="F:ZofX.Library.Encryption.MD4.context">
            
             4 32-bit words (interim result)
            
        </member>
        <member name="F:ZofX.Library.Encryption.MD4.count">
            
             Number of bytes procesed so far mod. 2 power of 64.
            
        </member>
        <member name="F:ZofX.Library.Encryption.MD4.buffer">
            
             512-bit input buffer = 16 x 32-bit words holds until it reaches 512 bits
            
        </member>
        <member name="F:ZofX.Library.Encryption.MD4.X">
            
             512-bit work buffer = 16 x 32-bit words
            
        </member>
        <member name="M:ZofX.Library.Encryption.MD4.#ctor(ZofX.Library.Encryption.MD4)">
            
             This constructor is here to implement the clonability of this class
            
            
        </member>
        <member name="M:ZofX.Library.Encryption.MD4.engineReset">
            
             Resets this object disregarding any temporary data present at the
             time of the invocation of this call.
            
        </member>
        <member name="M:ZofX.Library.Encryption.MD4.engineUpdate(System.Byte)">
            
             Continues an MD4 message digest using the input byte
            
             byte to input
        </member>
        <member name="M:ZofX.Library.Encryption.MD4.engineUpdate(System.Byte[],System.Int32,System.Int32)">
            
             MD4 block update operation
            
            
             Continues an MD4 message digest operation by filling the buffer,
             transform(ing) data in 512-bit message block(s), updating the variables
             context and count, and leaving (buffering) the remaining bytes in buffer
             for the next update or finish.
            
             input block
             start of meaningful bytes in input
             count of bytes in input blcok to consider
        </member>
        <member name="M:ZofX.Library.Encryption.MD4.engineDigest">
            
             Completes the hash computation by performing final operations such
             as padding. At the return of this engineDigest, the MD engine is
             reset.
            
             the array of bytes for the resulting hash value.
        </member>
        <member name="M:ZofX.Library.Encryption.MD4.GetByteHashFromString(System.String)">
            
             Returns a byte hash from a string
            
             string to hash
             byte-array that contains the hash
        </member>
        <member name="M:ZofX.Library.Encryption.MD4.GetByteHashFromBytes(System.Byte[])">
            
             Returns a binary hash from an input byte array
            
             byte-array to hash
             binary hash of input
        </member>
        <member name="M:ZofX.Library.Encryption.MD4.GetHexHashFromBytes(System.Byte[])">
            
             Returns a string that contains the hexadecimal hash
            
             byte-array to input
             String that contains the hex of the hash
        </member>
        <member name="M:ZofX.Library.Encryption.MD4.GetByteHashFromByte(System.Byte)">
            
             Returns a byte hash from the input byte
            
             byte to hash
             binary hash of the input byte
        </member>
        <member name="M:ZofX.Library.Encryption.MD4.GetHexHashFromByte(System.Byte)">
            
             Returns a string that contains the hexadecimal hash
            
             byte to hash
             String that contains the hex of the hash
        </member>
        <member name="M:ZofX.Library.Encryption.MD4.GetHexHashFromString(System.String)">
            
             Returns a string that contains the hexadecimal hash
            
             string to hash
             String that contains the hex of the hash
        </member>
        <member name="M:ZofX.Library.Encryption.MD4.transform(System.Byte[]@,System.Int32)">
            
             MD4 basic transformation
            
            
             Transforms context based on 512 bits from input block starting
             from the offset'th byte.
            
             input sub-array
             starting position of sub-array
        </member>
        <member name="T:ZofX.Library.Converter.DataConverter">
            <summary>
            数据转换类
            </summary>
        </member>
        <member name="M:ZofX.Library.Converter.DataConverter.DataRowToModel``1(System.Data.DataRow)">
            <summary>
            将数据行转换为实体类
            </summary>
            <typeparam name="T">目标类</typeparam>
            <param name="dr">数据行</param>
            <returns>实体</returns>
        </member>
        <member name="M:ZofX.Library.Converter.DataConverter.DataTableToList``1(System.Data.DataTable)">
            <summary>
            将DataTable转换成List
            </summary>
            <typeparam name="T">目标类</typeparam>
            <param name="dt">DataTable</param>
            <returns></returns>
        </member>
        <member name="T:ZofX.Library.File.Xml2Helper">
            <summary>
            2维XML操作类
            </summary>
        </member>
        <member name="M:ZofX.Library.File.Xml2Helper.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="xmlPath">XML文件绝对路径</param>
        </member>
        <member name="M:ZofX.Library.File.Xml2Helper.Read">
            <summary>
            获取XML文件所有结点的内容
            </summary>
            <returns>二维结果集</returns>
        </member>
        <member name="M:ZofX.Library.File.Xml2Helper.Read(System.Int32,System.String)">
            <summary>
            返回XML文件某一行某一结点的值
            </summary>
            <param name="row">行号，以0开始</param>
            <param name="NodeName">结点名</param>
            <returns>结点值</returns>
        </member>
        <member name="M:ZofX.Library.File.Xml2Helper.Write(System.Data.DataTable)">
            <summary>
            更新XML文件
            </summary>
            <param name="up_dt">欲更新DataTable</param>
        </member>
        <member name="M:ZofX.Library.File.Xml2Helper.Write(System.Int32,System.String,System.String)">
            <summary>
            更新XML文件某一行某一结点
            </summary>
            <param name="row">行数，以0开始</param>
            <param name="NodeName">结点名</param>
            <param name="NodeValue">结点值</param>
        </member>
        <member name="F:ZofX.Library.File.Xml2Helper.dt">
            <summary>
            装载XML数据
            </summary>
        </member>
        <member name="F:ZofX.Library.File.Xml2Helper.strXMLPath">
            <summary>
            XML文件绝对路径
            </summary>
        </member>
        <member name="P:ZofX.Library.File.Xml2Helper.XMLPath">
            <summary>
            获取XML文件绝对路径
            </summary>
        </member>
        <member name="T:ZofX.Library.Network.HttpRequester">
            <summary>
            HTTP请求类
            </summary>
        </member>
        <member name="F:ZofX.Library.Network.HttpRequester.encoding">
            <summary>
            默认UTF编码
            </summary>
        </member>
        <member name="F:ZofX.Library.Network.HttpRequester.cookieContainer">
            <summary>
            Cookie容器
            </summary>
        </member>
        <member name="M:ZofX.Library.Network.HttpRequester.Post(System.String,System.String)">
            <summary>
            发送HTTP POST请求
            </summary>
            <param name="requestUrl">请求URL</param>
            <param name="requestString">HTTP请求内容</param>
            <returns>HTTP响应内容</returns>
        </member>
        <member name="M:ZofX.Library.Network.HttpRequester.Get(System.String,System.String)">
            <summary>
            发送HTTP GET请求
            </summary>
            <param name="requestUrl">请求URL</param>
            <param name="requestString">HTTP请求内容</param>
            <returns>HTTP响应内容</returns>
        </member>
        <member name="P:ZofX.Library.Network.HttpRequester.Encoding">
            <summary>
            获取或设置编码
            </summary>
        </member>
        <member name="P:ZofX.Library.Network.HttpRequester.CookieContainer">
            <summary>
            获取Cookie容器
            </summary>
        </member>
    </members>
</doc>
